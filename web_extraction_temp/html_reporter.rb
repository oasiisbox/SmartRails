# frozen_string_literal: true

module SmartRails
  module Reporters
    class HtmlReporter
      def generate(issues, output_file)
        html = build_html(issues)
        File.write(output_file, html)
      end

      private

      def build_html(issues)
        statistics = calculate_statistics(issues)

        <<~HTML
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>SmartRails Audit Report</title>
            #{css_styles}
          </head>
          <body>
            <div class="container">
              <header>
                <h1>üöÇ SmartRails Audit Report</h1>
                <div class="timestamp">Generated on #{Time.now.strftime('%B %d, %Y at %H:%M:%S')}</div>
              </header>

              #{build_summary_section(statistics)}
              #{build_statistics_section(statistics)}
              #{build_issues_section(issues)}
          #{'    '}
              <footer>
                <p>Generated by SmartRails v#{SmartRails::VERSION}</p>
              </footer>
            </div>
          </body>
          </html>
        HTML
      end

      def css_styles
        <<~CSS
          <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body {
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
              line-height: 1.6;
              color: #333;
              background-color: #f5f5f5;
            }
            .container {
              max-width: 1200px;
              margin: 0 auto;
              padding: 20px;
            }
            header {
              background: white;
              padding: 30px;
              border-radius: 10px;
              box-shadow: 0 2px 5px rgba(0,0,0,0.1);
              margin-bottom: 30px;
            }
            h1 {
              color: #2c3e50;
              margin-bottom: 10px;
            }
            .timestamp {
              color: #7f8c8d;
              font-size: 14px;
            }
            .summary {
              background: white;
              padding: 25px;
              border-radius: 10px;
              box-shadow: 0 2px 5px rgba(0,0,0,0.1);
              margin-bottom: 30px;
            }
            .summary.critical { border-left: 5px solid #e74c3c; }
            .summary.high { border-left: 5px solid #e67e22; }
            .summary.medium { border-left: 5px solid #f39c12; }
            .summary.low { border-left: 5px solid #3498db; }
            .summary.clean { border-left: 5px solid #27ae60; }
            .statistics {
              display: grid;
              grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
              gap: 20px;
              margin-bottom: 30px;
            }
            .stat-card {
              background: white;
              padding: 20px;
              border-radius: 10px;
              box-shadow: 0 2px 5px rgba(0,0,0,0.1);
              text-align: center;
            }
            .stat-card h3 {
              color: #7f8c8d;
              font-size: 14px;
              text-transform: uppercase;
              margin-bottom: 10px;
            }
            .stat-card .number {
              font-size: 36px;
              font-weight: bold;
              color: #2c3e50;
            }
            .issues {
              background: white;
              padding: 30px;
              border-radius: 10px;
              box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            }
            .issue {
              padding: 20px;
              border-bottom: 1px solid #ecf0f1;
              transition: background-color 0.2s;
            }
            .issue:hover {
              background-color: #f8f9fa;
            }
            .issue:last-child {
              border-bottom: none;
            }
            .issue-header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin-bottom: 10px;
            }
            .issue-title {
              display: flex;
              align-items: center;
              gap: 10px;
            }
            .severity {
              padding: 4px 12px;
              border-radius: 20px;
              font-size: 12px;
              font-weight: bold;
              text-transform: uppercase;
            }
            .severity.critical {
              background-color: #e74c3c;
              color: white;
            }
            .severity.high {
              background-color: #e67e22;
              color: white;
            }
            .severity.medium {
              background-color: #f39c12;
              color: white;
            }
            .severity.low {
              background-color: #3498db;
              color: white;
            }
            .issue-type {
              font-weight: bold;
              color: #2c3e50;
            }
            .issue-message {
              color: #555;
              margin-bottom: 10px;
            }
            .issue-meta {
              display: flex;
              gap: 20px;
              font-size: 14px;
              color: #7f8c8d;
            }
            .auto-fixable {
              color: #27ae60;
              font-weight: bold;
            }
            footer {
              text-align: center;
              padding: 30px;
              color: #7f8c8d;
              font-size: 14px;
            }
            .chart {
              margin-top: 20px;
            }
            .bar {
              display: flex;
              align-items: center;
              margin-bottom: 10px;
            }
            .bar-label {
              width: 100px;
              font-size: 14px;
              color: #7f8c8d;
            }
            .bar-fill {
              height: 25px;
              background-color: #3498db;
              border-radius: 3px;
              min-width: 20px;
              display: flex;
              align-items: center;
              justify-content: flex-end;
              padding-right: 10px;
              color: white;
              font-size: 12px;
              font-weight: bold;
            }
          </style>
        CSS
      end

      def calculate_statistics(issues)
        {
          total: issues.count,
          critical: issues.count { |i| i[:severity] == :critical },
          high: issues.count { |i| i[:severity] == :high },
          medium: issues.count { |i| i[:severity] == :medium },
          low: issues.count { |i| i[:severity] == :low },
          auto_fixable: issues.count { |i| i[:auto_fix] },
          by_type: issues.group_by { |i| i[:type] }.transform_values(&:count)
        }
      end

      def build_summary_section(statistics)
        severity_class = if statistics[:critical] > 0
                           'critical'
                         elsif statistics[:high] > 0
                           'high'
                         elsif statistics[:medium] > 0
                           'medium'
                         elsif statistics[:low] > 0
                           'low'
                         else
                           'clean'
                         end

        summary_text = if statistics[:total] == 0
                         '‚ú® Excellent! No issues found in your Rails application.'
                       elsif statistics[:critical] > 0
                         '‚ö†Ô∏è Critical issues detected that require immediate attention!'
                       elsif statistics[:high] > 0
                         'üîç High priority issues found that should be addressed soon.'
                       else
                         'üìã Some improvements suggested for your Rails application.'
                       end

        <<~HTML
          <div class="summary #{severity_class}">
            <h2>Summary</h2>
            <p>#{summary_text}</p>
            <p>Total issues found: <strong>#{statistics[:total]}</strong>#{' '}
               (#{statistics[:auto_fixable]} can be fixed automatically)</p>
          </div>
        HTML
      end

      def build_statistics_section(statistics)
        <<~HTML
          <div class="statistics">
            <div class="stat-card">
              <h3>Critical Issues</h3>
              <div class="number" style="color: #e74c3c;">#{statistics[:critical]}</div>
            </div>
            <div class="stat-card">
              <h3>High Issues</h3>
              <div class="number" style="color: #e67e22;">#{statistics[:high]}</div>
            </div>
            <div class="stat-card">
              <h3>Medium Issues</h3>
              <div class="number" style="color: #f39c12;">#{statistics[:medium]}</div>
            </div>
            <div class="stat-card">
              <h3>Low Issues</h3>
              <div class="number" style="color: #3498db;">#{statistics[:low]}</div>
            </div>
          </div>
        HTML
      end

      def build_issues_section(issues)
        return '' if issues.empty?

        issues_html = issues.sort_by { |i| severity_weight(i[:severity]) }
          .map { |issue| build_issue_html(issue) }
          .join("\n")

        <<~HTML
          <div class="issues">
            <h2>Issues Detail</h2>
            #{build_type_chart(issues)}
            <div class="issues-list">
              #{issues_html}
            </div>
          </div>
        HTML
      end

      def build_type_chart(issues)
        by_type = issues.group_by { |i| i[:type] }.transform_values(&:count)
        max_count = by_type.values.max || 1

        bars = by_type.map do |type, count|
          width_percent = (count.to_f / max_count * 100).round
          <<~HTML
            <div class="bar">
              <div class="bar-label">#{type}</div>
              <div class="bar-fill" style="width: #{width_percent}%;">#{count}</div>
            </div>
          HTML
        end.join("\n")

        <<~HTML
          <div class="chart">
            <h3>Issues by Type</h3>
            #{bars}
          </div>
        HTML
      end

      def build_issue_html(issue)
        <<~HTML
          <div class="issue">
            <div class="issue-header">
              <div class="issue-title">
                <span class="issue-type">#{issue[:type]}</span>
                <span class="severity #{issue[:severity]}">#{issue[:severity]}</span>
              </div>
              #{'<span class="auto-fixable">‚úì Auto-fixable</span>' if issue[:auto_fix]}
            </div>
            <div class="issue-message">#{issue[:message]}</div>
            <div class="issue-meta">
              #{"<span>üìÅ #{issue[:file]}#{":#{issue[:line]}" if issue[:line]}</span>" if issue[:file]}
              <span>üîç #{issue[:auditor]}</span>
            </div>
          </div>
        HTML
      end

      def severity_weight(severity)
        case severity
        when :critical then 0
        when :high then 1
        when :medium then 2
        when :low then 3
        else 4
        end
      end
    end
  end
end
